{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","placeholder","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","useFetchGif","loading","state","setState","useEffect","then","imgs","GifGrid","key","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"qMA0CeA,EAtCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAACS,GAAD,OAAUP,GAAV,mBAAwBO,OACtCN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,QAoBfG,YAAa,sBCfdC,EAXK,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAG7B,OACI,yBAAKC,UAAU,0DACX,yBAAKC,IAAMF,EAAKG,IAAKJ,IACrB,2BAAIA,K,uBCSDK,EAhBD,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACPN,EADO,iDAC0CO,UAAUF,GADpD,+DAGMG,MAAMR,GAHZ,cAGPS,EAHO,gBAKUA,EAAKC,OALf,uBAKLC,EALK,EAKLA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAV7B,kBAaNY,GAbM,4CAAH,sDCsBCK,EArBK,SAACZ,GACjB,MAA0BtB,mBAAS,CAC/B4B,KAAK,GACLO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAXAC,qBAAU,WACNjB,EAAQC,GACHiB,MAAK,SAAAC,GACFH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAGtB,CAACb,IAGGc,GCoBIK,EArCC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEf,EAAkCY,EAAYZ,GAAhCU,EAAd,EAAQJ,KAAcO,EAAtB,EAAsBA,QAUtB,OACI,oCACI,wBAAIjB,UAAU,qDAAqDI,GAClEa,GAAW,yCAEZ,yBAAKjB,UAAU,+DAIPc,EAAOF,KAAI,SAAAC,GAAG,OAEN,kBAAC,EAAD,eACIW,IAAKX,EAAIhB,IACLgB,UCQrBY,EAjCK,WAGhB,MAAoC3C,mBAAS,CAAC,YAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KASA,OACA,oCACA,4CACA,6BACI,kBAAC,EAAD,CAAaA,cAAiBA,IAElC,4BAEQ6C,EAAWd,KAAI,SAAAR,GAAQ,OACnB,kBAAC,EAAD,CACAoB,IAAKpB,EACLA,SAAUA,UCfXuB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OAEL,kBAAC,EAAD,MACFC,SAASC,eAAe,SAM1BX,K","file":"static/js/main.ac8058e5.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n    const HandleInputChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n\r\n    }\r\n\r\n    const HandleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        \r\n        if(inputValue.trim().length > 2){\r\n            setCategories((cat) => [inputValue,...cat]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n    \r\n    return (\r\n        <form onSubmit={HandleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange = {HandleInputChange}\r\n                placeholder= 'Busca tu gif...'\r\n            \r\n            />\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n\r\n}\r\n\r\nexport default AddCategory;\r\n","\r\nimport React from 'react'\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n\r\n\r\n    return (\r\n        <div className='card animate__animated animate__bounce animate__fadeIn'>\r\n            <img src= {url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem;","\r\n\r\n const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=ZpNf37KooSFzI4oKvHUEsH4JI3pzKGs6`;\r\n\r\n    const resp = await fetch(url);\r\n\r\n    const { data } = await resp.json()\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}\r\n\r\nexport default getGifs;","import { useEffect, useState } from \"react\"\r\nimport getGifs from \"../helpers/getGifs\";\r\n\r\nconst useFetchGif = (category)=>{\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [category])\r\n\r\n\r\n    return state;\r\n} \r\n\r\nexport default useFetchGif;","\r\nimport React from 'react'\r\nimport GifGridItem from './GifGridItem';\r\nimport useFetchGif from '../hooks/useFetchGifs';\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGif(category);\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__bounce animate__fadeIn\">{category}</h3>\r\n            {loading && <p>Loading...</p>}\r\n\r\n            <div className=\"card-grid animate__animated animate__bounce animate__fadeIn\">\r\n\r\n\r\n                {\r\n                    images.map(img => (\r\n                       \r\n                            <GifGridItem\r\n                                key={img.id}\r\n                                {...img}\r\n                            />\r\n                    ))\r\n                }\r\n\r\n\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid;\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp =()=>{\r\n\r\n\r\n    const [categories, setCategories] = useState(['Ecuador'])\r\n\r\n    // const HandleApp = ()=> {\r\n    //     // setCategories((cat)=>[...cat,'Jona']);\r\n    //     setCategories([...categories,'Jonathan']);\r\n\r\n    // };\r\n\r\n    \r\n    return (\r\n    <>\r\n    <h2>GifExpertApp</h2>\r\n    <hr/>\r\n        <AddCategory setCategories = {setCategories}/>\r\n\r\n    <ol>\r\n        {\r\n            categories.map(category => (\r\n                <GifGrid \r\n                key={category}\r\n                category={category}/>\r\n                )\r\n            )\r\n        }\r\n    </ol>\r\n    </>\r\n    );\r\n\r\n}\r\n\r\nexport default GifExpertApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}